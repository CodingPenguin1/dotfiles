"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const expect = require("chai").expect;
const CodyMusic = __importStar(require("../../index"));
const util_1 = require("../util");
const moment = require("moment-timezone");
const testUtil = new util_1.TestUtil();
/**
 * Don't add "async" into the it condition.
 * i.e. it("description text", async (done) => {
 *     // do stuff
 * });
 * It will return the following error if you do.
 * "Error: Resolution method is overspecified. Specify a callback *or* return a Promise; not both."
 */
describe("recently playing tracks tests", () => {
    before(() => {
        let configFile = __dirname + "/../config.json";
        let data = testUtil.getJsonFromFile(configFile);
        CodyMusic.setCredentials({
            refreshToken: data.myRefreshToken,
            clientSecret: data.clientSecret,
            clientId: data.clientId,
            accessToken: data.myAccessToken,
        });
    });
    beforeEach(() => {
        //
    });
    it("Get tracks after time", async () => {
        const limit = 10;
        const momentDate = moment().utc();
        const after = momentDate.valueOf();
        const resp = await CodyMusic.getSpotifyRecentlyPlayedAfter(limit, after);
        expect(resp.data.tracks.length).to.equal(0);
    });
    it("Get tracks before time without limit", async () => {
        const limit = -1;
        const momentDate = moment().utc();
        const before = momentDate.valueOf();
        const resp = await CodyMusic.getSpotifyRecentlyPlayedBefore(limit, before);
        expect(resp.data.tracks.length).to.not.equal(0);
    });
    it("Get tracks with limit", async () => {
        const limit = 2;
        const momentDate = moment().utc();
        const before = momentDate.valueOf();
        const resp = await CodyMusic.getSpotifyRecentlyPlayedBefore(limit, before);
        expect(resp.data.tracks.length).to.equal(2);
    });
});
