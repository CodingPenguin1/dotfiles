"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const CodyMusic = __importStar(require("../../index"));
const expect = require("chai").expect;
const dosageAlbumUri = "spotify:album:10h0WKev2yYudLvXIVvSFP";
const trackName = "Heavy";
describe("album-fetch-tests", () => {
    before(() => {
        const creds = {
            refreshToken: process.env.REFRESH_TOKEN,
            clientSecret: process.env.CLIENT_SECRET,
            clientId: process.env.CLIENT_ID,
            accessToken: process.env.ACCESS_TOKEN,
        };
        CodyMusic.setCredentials(creds);
    });
    context("Validate fetching album tracks", () => {
        it("should contain tracks of an album", async () => {
            const tracks = await CodyMusic.getSpotifyAlbumTracks(dosageAlbumUri);
            const foundTrack = tracks.find((n) => n.name === trackName);
            expect(foundTrack.artist).equals("Collective Soul");
        });
    });
});
