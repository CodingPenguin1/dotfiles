"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const CodyMusic = __importStar(require("../../index"));
const expect = require("chai").expect;
const trackURIs = [
    "spotify:track:00VKR5XH5jid1AgUdFz4bs",
    "spotify:track:013AWvizllIUEC2FOBzOnh",
    "spotify:track:0aF5lDR6bB34Bhx2MefN1X"
];
describe("track-bulk-fetch-tests", () => {
    before(() => {
        CodyMusic.setCredentials({
            refreshToken: process.env.REFRESH_TOKEN,
            clientSecret: process.env.CLIENT_SECRET,
            clientId: process.env.CLIENT_ID,
            accessToken: process.env.ACCESS_TOKEN,
        });
    });
    context("Validate populating features and artists", () => {
        // validate features and artists to save on the outgoing spotify API calls
        it("should contain features and artists", async () => {
            // fully populate the tracks and validate features
            const tracks = await CodyMusic.getSpotifyTracks(trackURIs, true, true);
            // make sure it has features for all 3 track uri's
            let featureCount = 0;
            tracks.forEach((track) => {
                if (track.features.loudness) {
                    featureCount++;
                }
            });
            // validate
            expect(featureCount).to.eql(trackURIs.length);
            // make sure there's at least 1 image for each track "artist"
            let artistImageCount = 0;
            tracks.forEach((track) => {
                for (let i = 0; i < track.artists.length; i++) {
                    if (track.artists[i].images.length) {
                        artistImageCount++;
                        break;
                    }
                }
            });
            // validate
            expect(artistImageCount).to.eql(trackURIs.length);
        });
    });
});
